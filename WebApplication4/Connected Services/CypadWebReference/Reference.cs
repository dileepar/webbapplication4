//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CypadWebReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CypadWebReference.CypadSQMSyncSoap")]
    public interface CypadSQMSyncSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserDeviceManagement", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> UserDeviceManagementAsync(string UserId, string DeviceId, string DataString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsDeviceNeedsResetting", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> IsDeviceNeedsResettingAsync(string UserId, string DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetStudentTransactionsURL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetStudentTransactionsURLAsync(string StudentGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMealSelectionURL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetMealSelectionURLAsync(string LocationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTradingSummaryURL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetTradingSummaryURLAsync(string UserGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetWeekMenuURL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetWeekMenuURLAsync(string LocationGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateLastSynchronisedN2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UpdateLastSynchronisedN2Async(string UserId, string DeviceId, string LastSynchronised, string Usage, string Version, string Duration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangePassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ChangePasswordAsync(string UserId, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> GetPasswordAsync(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Authenticate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> AuthenticateAsync(string UserName, string Password, string DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AutoConfig", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AutoConfigAsync(string Client, string Attribute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSyncTables", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> GetSyncTablesAsync(string UserId, string DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ClearSyncTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ClearSyncTableAsync(string UserId, string DeviceId, string TableName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AckSyncTables", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AckSyncTablesAsync(string UserId, string DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> DownloadTableAsync(string UserId, string DeviceId, string TableName, string BlockId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AckTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AckTableAsync(string UserId, string DeviceId, string TableName, string BlockId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadDataZippedN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UploadDataZippedNAsync(string TableName, string TableId, string InsertColumns, string UpdateColumns, string UserId, string DeviceId, string Data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadImageRawN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CypadWebReference.UploadImageRawNResponse> UploadImageRawNAsync(CypadWebReference.UploadImageRawNRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadImageRaw", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CypadWebReference.UploadImageRawResponse> UploadImageRawAsync(CypadWebReference.UploadImageRawRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadImageZipped", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UploadImageZippedAsync(string TableId, string Data, string ImageData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentZipped", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetDocumentZippedAsync(string DocumentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLinkImageZipped", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetLinkImageZippedAsync(string ImageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetStaffImageZipped", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetStaffImageZippedAsync(string ImageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EmailInspectionReportStandard", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EmailInspectionReportStandardAsync(string UserId, string DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EmailInspectionReportSSP7", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> EmailInspectionReportSSP7Async(string UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadZippedTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DownloadZippedTableAsync(string UserId, string DeviceId, string TableName, string TableId, string BlockId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckVersionAsync(string Module);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckVersionForUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckVersionForUserAsync(string Module, string UserId, string DeviceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNewMessagesForSite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> GetNewMessagesForSiteAsync(string UserId, string DeviceId, string BlockId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendEmailAsync(string From, string To, string Subject, string Body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckCashSessionTotal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckCashSessionTotalAsync(string RecordId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/TotalMealsPreSelected", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TotalMealsPreSelectedAsync(string LocationId, string Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAttachmentsZipped", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetAttachmentsZippedAsync(string TableName, string ReturnColumn, string FilterColumn, string FilterId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadImageRawN", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadImageRawNRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string TableId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ImageData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string UserId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string DeviceId;
        
        public UploadImageRawNRequest()
        {
        }
        
        public UploadImageRawNRequest(string TableId, string Data, byte[] ImageData, string UserId, string DeviceId)
        {
            this.TableId = TableId;
            this.Data = Data;
            this.ImageData = ImageData;
            this.UserId = UserId;
            this.DeviceId = DeviceId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadImageRawNResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadImageRawNResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadImageRawNResult;
        
        public UploadImageRawNResponse()
        {
        }
        
        public UploadImageRawNResponse(string UploadImageRawNResult)
        {
            this.UploadImageRawNResult = UploadImageRawNResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadImageRaw", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadImageRawRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string TableId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ImageData;
        
        public UploadImageRawRequest()
        {
        }
        
        public UploadImageRawRequest(string TableId, string Data, byte[] ImageData)
        {
            this.TableId = TableId;
            this.Data = Data;
            this.ImageData = ImageData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadImageRawResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadImageRawResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string UploadImageRawResult;
        
        public UploadImageRawResponse()
        {
        }
        
        public UploadImageRawResponse(string UploadImageRawResult)
        {
            this.UploadImageRawResult = UploadImageRawResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface CypadSQMSyncSoapChannel : CypadWebReference.CypadSQMSyncSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class CypadSQMSyncSoapClient : System.ServiceModel.ClientBase<CypadWebReference.CypadSQMSyncSoap>, CypadWebReference.CypadSQMSyncSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CypadSQMSyncSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(CypadSQMSyncSoapClient.GetBindingForEndpoint(endpointConfiguration), CypadSQMSyncSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CypadSQMSyncSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CypadSQMSyncSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CypadSQMSyncSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CypadSQMSyncSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CypadSQMSyncSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> UserDeviceManagementAsync(string UserId, string DeviceId, string DataString)
        {
            return base.Channel.UserDeviceManagementAsync(UserId, DeviceId, DataString);
        }
        
        public System.Threading.Tasks.Task<string> IsDeviceNeedsResettingAsync(string UserId, string DeviceId)
        {
            return base.Channel.IsDeviceNeedsResettingAsync(UserId, DeviceId);
        }
        
        public System.Threading.Tasks.Task<string> GetStudentTransactionsURLAsync(string StudentGuid)
        {
            return base.Channel.GetStudentTransactionsURLAsync(StudentGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetMealSelectionURLAsync(string LocationGuid)
        {
            return base.Channel.GetMealSelectionURLAsync(LocationGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetTradingSummaryURLAsync(string UserGuid)
        {
            return base.Channel.GetTradingSummaryURLAsync(UserGuid);
        }
        
        public System.Threading.Tasks.Task<string> GetWeekMenuURLAsync(string LocationGuid)
        {
            return base.Channel.GetWeekMenuURLAsync(LocationGuid);
        }
        
        public System.Threading.Tasks.Task<string> UpdateLastSynchronisedN2Async(string UserId, string DeviceId, string LastSynchronised, string Usage, string Version, string Duration)
        {
            return base.Channel.UpdateLastSynchronisedN2Async(UserId, DeviceId, LastSynchronised, Usage, Version, Duration);
        }
        
        public System.Threading.Tasks.Task<string> ChangePasswordAsync(string UserId, string NewPassword)
        {
            return base.Channel.ChangePasswordAsync(UserId, NewPassword);
        }
        
        public System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> GetPasswordAsync(string UserId)
        {
            return base.Channel.GetPasswordAsync(UserId);
        }
        
        public System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> AuthenticateAsync(string UserName, string Password, string DeviceId)
        {
            return base.Channel.AuthenticateAsync(UserName, Password, DeviceId);
        }
        
        public System.Threading.Tasks.Task<string> AutoConfigAsync(string Client, string Attribute)
        {
            return base.Channel.AutoConfigAsync(Client, Attribute);
        }
        
        public System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> GetSyncTablesAsync(string UserId, string DeviceId)
        {
            return base.Channel.GetSyncTablesAsync(UserId, DeviceId);
        }
        
        public System.Threading.Tasks.Task<string> ClearSyncTableAsync(string UserId, string DeviceId, string TableName)
        {
            return base.Channel.ClearSyncTableAsync(UserId, DeviceId, TableName);
        }
        
        public System.Threading.Tasks.Task<string> AckSyncTablesAsync(string UserId, string DeviceId)
        {
            return base.Channel.AckSyncTablesAsync(UserId, DeviceId);
        }
        
        public System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> DownloadTableAsync(string UserId, string DeviceId, string TableName, string BlockId)
        {
            return base.Channel.DownloadTableAsync(UserId, DeviceId, TableName, BlockId);
        }
        
        public System.Threading.Tasks.Task<string> AckTableAsync(string UserId, string DeviceId, string TableName, string BlockId)
        {
            return base.Channel.AckTableAsync(UserId, DeviceId, TableName, BlockId);
        }
        
        public System.Threading.Tasks.Task<string> UploadDataZippedNAsync(string TableName, string TableId, string InsertColumns, string UpdateColumns, string UserId, string DeviceId, string Data)
        {
            return base.Channel.UploadDataZippedNAsync(TableName, TableId, InsertColumns, UpdateColumns, UserId, DeviceId, Data);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CypadWebReference.UploadImageRawNResponse> CypadWebReference.CypadSQMSyncSoap.UploadImageRawNAsync(CypadWebReference.UploadImageRawNRequest request)
        {
            return base.Channel.UploadImageRawNAsync(request);
        }
        
        public System.Threading.Tasks.Task<CypadWebReference.UploadImageRawNResponse> UploadImageRawNAsync(string TableId, string Data, byte[] ImageData, string UserId, string DeviceId)
        {
            CypadWebReference.UploadImageRawNRequest inValue = new CypadWebReference.UploadImageRawNRequest();
            inValue.TableId = TableId;
            inValue.Data = Data;
            inValue.ImageData = ImageData;
            inValue.UserId = UserId;
            inValue.DeviceId = DeviceId;
            return ((CypadWebReference.CypadSQMSyncSoap)(this)).UploadImageRawNAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CypadWebReference.UploadImageRawResponse> CypadWebReference.CypadSQMSyncSoap.UploadImageRawAsync(CypadWebReference.UploadImageRawRequest request)
        {
            return base.Channel.UploadImageRawAsync(request);
        }
        
        public System.Threading.Tasks.Task<CypadWebReference.UploadImageRawResponse> UploadImageRawAsync(string TableId, string Data, byte[] ImageData)
        {
            CypadWebReference.UploadImageRawRequest inValue = new CypadWebReference.UploadImageRawRequest();
            inValue.TableId = TableId;
            inValue.Data = Data;
            inValue.ImageData = ImageData;
            return ((CypadWebReference.CypadSQMSyncSoap)(this)).UploadImageRawAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> UploadImageZippedAsync(string TableId, string Data, string ImageData)
        {
            return base.Channel.UploadImageZippedAsync(TableId, Data, ImageData);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentZippedAsync(string DocumentId)
        {
            return base.Channel.GetDocumentZippedAsync(DocumentId);
        }
        
        public System.Threading.Tasks.Task<string> GetLinkImageZippedAsync(string ImageId)
        {
            return base.Channel.GetLinkImageZippedAsync(ImageId);
        }
        
        public System.Threading.Tasks.Task<string> GetStaffImageZippedAsync(string ImageId)
        {
            return base.Channel.GetStaffImageZippedAsync(ImageId);
        }
        
        public System.Threading.Tasks.Task<string> EmailInspectionReportStandardAsync(string UserId, string DeviceId)
        {
            return base.Channel.EmailInspectionReportStandardAsync(UserId, DeviceId);
        }
        
        public System.Threading.Tasks.Task<string> EmailInspectionReportSSP7Async(string UserId)
        {
            return base.Channel.EmailInspectionReportSSP7Async(UserId);
        }
        
        public System.Threading.Tasks.Task<string> DownloadZippedTableAsync(string UserId, string DeviceId, string TableName, string TableId, string BlockId)
        {
            return base.Channel.DownloadZippedTableAsync(UserId, DeviceId, TableName, TableId, BlockId);
        }
        
        public System.Threading.Tasks.Task<string> CheckVersionAsync(string Module)
        {
            return base.Channel.CheckVersionAsync(Module);
        }
        
        public System.Threading.Tasks.Task<string> CheckVersionForUserAsync(string Module, string UserId, string DeviceId)
        {
            return base.Channel.CheckVersionForUserAsync(Module, UserId, DeviceId);
        }
        
        public System.Threading.Tasks.Task<CypadWebReference.ArrayOfXElement> GetNewMessagesForSiteAsync(string UserId, string DeviceId, string BlockId)
        {
            return base.Channel.GetNewMessagesForSiteAsync(UserId, DeviceId, BlockId);
        }
        
        public System.Threading.Tasks.Task<string> SendEmailAsync(string From, string To, string Subject, string Body)
        {
            return base.Channel.SendEmailAsync(From, To, Subject, Body);
        }
        
        public System.Threading.Tasks.Task<string> CheckCashSessionTotalAsync(string RecordId)
        {
            return base.Channel.CheckCashSessionTotalAsync(RecordId);
        }
        
        public System.Threading.Tasks.Task<string> TotalMealsPreSelectedAsync(string LocationId, string Date)
        {
            return base.Channel.TotalMealsPreSelectedAsync(LocationId, Date);
        }
        
        public System.Threading.Tasks.Task<string> GetAttachmentsZippedAsync(string TableName, string ReturnColumn, string FilterColumn, string FilterId)
        {
            return base.Channel.GetAttachmentsZippedAsync(TableName, ReturnColumn, FilterColumn, FilterId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CypadSQMSyncSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.CypadSQMSyncSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CypadSQMSyncSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://office.cypad.net/cypadsqm_android4_4_Dev/webservices/CypadSQMSync.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.CypadSQMSyncSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://office.cypad.net/cypadsqm_android4_4_Dev/webservices/CypadSQMSync.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            CypadSQMSyncSoap,
            
            CypadSQMSyncSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.0.1")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
